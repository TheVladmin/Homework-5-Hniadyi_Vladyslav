{
	"info": {
		"_postman_id": "ce3efb4a-41a3-4c10-98b7-72be2684f5a8",
		"name": "Homework 5 collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44636989",
		"_collection_link": "https://solar-flare-1626936.postman.co/workspace/Vlad_r_d's-Workspace~8c7eb4f9-b26a-4436-8bcc-e6e9082a2d55/collection/44636989-ce3efb4a-41a3-4c10-98b7-72be2684f5a8?action=share&source=collection_link&creator=44636989"
	},
	"item": [
		{
			"name": "Get Lists",
			"item": [
				{
					"name": "Get Lists Positive tests",
					"item": [
						{
							"name": "Get Lists / Create List 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var L_name = pm.collectionVariables.get(\"List_random_name\");\r",
											"var L_content = pm.collectionVariables.get(\"List_random_content\");\r",
											"\r",
											"pm.test(`Check that list name is \"${L_name}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_name);\r",
											"});\r",
											"\r",
											"pm.test(`Check that list content is \"${L_content}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_content);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var id = jsonData.id;\r",
											"pm.collectionVariables.set(\"List1_id\", id);\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"id\": { \"type\": \"string\" },\r",
											"        \"name\": { \"type\": \"string\" },\r",
											"        \"deleted\": { \"type\": \"boolean\" },\r",
											"        \"orderindex\": { \"type\": \"number\" },\r",
											"        \"content\": { \"type\": \"string\" },\r",
											"        \"priority\": { \"type\": \"null\" },\r",
											"        \"assignee\": { \"type\": \"null\" },\r",
											"        \"due_date\": { \"type\": \"null\" },\r",
											"        \"start_date\": { \"type\": \"null\" },\r",
											"        \"folder\": {\"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"id\": { \"type\": \"string\" },\r",
											"                \"name\": { \"type\": \"string\" },\r",
											"                \"hidden\": { \"type\": \"boolean\" },\r",
											"                \"access\": { \"type\": \"boolean\" }\r",
											"            }\r",
											"        },\r",
											"        \"space\": {\"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"id\": { \"type\": \"string\" },\r",
											"                \"name\": { \"type\": \"string\" },\r",
											"                \"access\": { \"type\": \"boolean\" }\r",
											"            }\r",
											"        },\r",
											"        \"inbound_address\": { \"type\": \"string\" },\r",
											"        \"archived\": { \"type\": \"boolean\" },\r",
											"        \"override_statuses\": { \"type\": \"boolean\" },\r",
											"        \"statuses\": {\"type\": \"array\",\r",
											"            \"items\": {\"type\": \"object\",\r",
											"                \"properties\": {\r",
											"                    \"id\": { \"type\": \"string\" },\r",
											"                    \"status\": { \"type\": \"string\" },\r",
											"                    \"orderindex\": { \"type\": \"number\" },\r",
											"                    \"color\": { \"type\": \"string\" },\r",
											"                    \"type\": { \"type\": \"string\" },\r",
											"                    \"status_group\": { \"type\": \"string\" }\r",
											"                }\r",
											"            }\r",
											"        },\r",
											"        \"permission_level\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"id\", \"name\", \"deleted\", \"orderindex\", \"content\", \"priority\", \"assignee\", \"due_date\", \"start_date\", \"folder\", \"space\", \"inbound_address\", \"archived\", \"override_statuses\", \"statuses\", \"permission_level\"]\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var name = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"\r",
											"pm.collectionVariables.set(\"List_random_name\", name);\r",
											"\r",
											"var content = pm.variables.replaceIn('{{$randomWords}}');\r",
											"pm.collectionVariables.set(\"List_random_content\", content);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{List_random_name}}\",\r\n    \"content\": \"{{List_random_content}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/folder/{{Lists_folder_id}}/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"folder",
										"{{Lists_folder_id}}",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Lists / Create List 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var L_name2 = pm.collectionVariables.get(\"List2_random_name\");\r",
											"var L_content2 = pm.collectionVariables.get(\"List2_random_content\");\r",
											"\r",
											"pm.test(`Check that list name is \"${L_name2}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_name2);\r",
											"});\r",
											"\r",
											"pm.test(`Check that list content is \"${L_content2}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_content2);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var id = jsonData.id;\r",
											"pm.collectionVariables.set(\"List2_id\", id);\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"id\": { \"type\": \"string\" },\r",
											"        \"name\": { \"type\": \"string\" },\r",
											"        \"deleted\": { \"type\": \"boolean\" },\r",
											"        \"orderindex\": { \"type\": \"number\" },\r",
											"        \"content\": { \"type\": \"string\" },\r",
											"        \"priority\": { \"type\": \"null\" },\r",
											"        \"assignee\": { \"type\": \"null\" },\r",
											"        \"due_date\": { \"type\": \"null\" },\r",
											"        \"start_date\": { \"type\": \"null\" },\r",
											"        \"folder\": {\"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"id\": { \"type\": \"string\" },\r",
											"                \"name\": { \"type\": \"string\" },\r",
											"                \"hidden\": { \"type\": \"boolean\" },\r",
											"                \"access\": { \"type\": \"boolean\" }\r",
											"            }\r",
											"        },\r",
											"        \"space\": {\"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"id\": { \"type\": \"string\" },\r",
											"                \"name\": { \"type\": \"string\" },\r",
											"                \"access\": { \"type\": \"boolean\" }\r",
											"            }\r",
											"        },\r",
											"        \"inbound_address\": { \"type\": \"string\" },\r",
											"        \"archived\": { \"type\": \"boolean\" },\r",
											"        \"override_statuses\": { \"type\": \"boolean\" },\r",
											"        \"statuses\": {\"type\": \"array\",\r",
											"            \"items\": {\"type\": \"object\",\r",
											"                \"properties\": {\r",
											"                    \"id\": { \"type\": \"string\" },\r",
											"                    \"status\": { \"type\": \"string\" },\r",
											"                    \"orderindex\": { \"type\": \"number\" },\r",
											"                    \"color\": { \"type\": \"string\" },\r",
											"                    \"type\": { \"type\": \"string\" },\r",
											"                    \"status_group\": { \"type\": \"string\" }\r",
											"                }\r",
											"            }\r",
											"        },\r",
											"        \"permission_level\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"id\", \"name\", \"deleted\", \"orderindex\", \"content\", \"priority\", \"assignee\", \"due_date\", \"start_date\", \"folder\", \"space\", \"inbound_address\", \"archived\", \"override_statuses\", \"statuses\", \"permission_level\"]\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var name2 = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"\r",
											"pm.collectionVariables.set(\"List2_random_name\", name2);\r",
											"\r",
											"var content2 = pm.variables.replaceIn('{{$randomWords}}');\r",
											"pm.collectionVariables.set(\"List2_random_content\", content2);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{List2_random_name}}\",\r\n    \"content\": \"{{List2_random_content}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/folder/{{Lists_folder_id}}/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"folder",
										"{{Lists_folder_id}}",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Lists / Get Lists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var L_name = pm.collectionVariables.get(\"List_random_name\");\r",
											"var L_content = pm.collectionVariables.get(\"List_random_content\");\r",
											"var L_name2 = pm.collectionVariables.get(\"List2_random_name\");\r",
											"var L_content2 = pm.collectionVariables.get(\"List2_random_content\");\r",
											"\r",
											"pm.test(`Check that list 1 name is \"${L_name}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_name);\r",
											"});\r",
											"\r",
											"pm.test(`Check that list 1 content is \"${L_content}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_content);\r",
											"});\r",
											"\r",
											"pm.test(`Check that list 2 name is \"${L_name2}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_name2);\r",
											"});\r",
											"\r",
											"pm.test(`Check that list 2 content is \"${L_content2}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_content2);\r",
											"});\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: 'object',\r",
											"    properties: {\r",
											"        lists: {\r",
											"            type: 'array',\r",
											"            items: {\r",
											"                type: 'object',\r",
											"                properties: {\r",
											"                    id: { type: 'string' },\r",
											"                    name: { type: 'string' },\r",
											"                    orderindex: { type: 'number' },\r",
											"                    content: { type: 'string' },\r",
											"                    status: { type: ['null', 'string'] },\r",
											"                    priority: { type: ['null', 'string'] },\r",
											"                    assignee: { type: ['null', 'string'] },\r",
											"                    task_count: { type: 'number' },\r",
											"                    due_date: { type: ['null', 'string'] },\r",
											"                    start_date: { type: ['null', 'string'] },\r",
											"                    folder: {\r",
											"                        type: 'object',\r",
											"                        properties: {\r",
											"                            id: { type: 'string' },\r",
											"                            name: { type: 'string' },\r",
											"                            hidden: { type: 'boolean' },\r",
											"                            access: { type: 'boolean' }\r",
											"                        },\r",
											"                        required: ['id', 'name', 'hidden', 'access']\r",
											"                    },\r",
											"                    space: {\r",
											"                        type: 'object',\r",
											"                        properties: {\r",
											"                            id: { type: 'string' },\r",
											"                            name: { type: 'string' },\r",
											"                            access: { type: 'boolean' }\r",
											"                        },\r",
											"                        required: ['id', 'name', 'access']\r",
											"                    },\r",
											"                    archived: { type: 'boolean' },\r",
											"                    override_statuses: { type: 'boolean' },\r",
											"                    permission_level: { type: 'string' }\r",
											"                },\r",
											"                 \"required\": [\"id\", \"name\", \"orderindex\", \"content\", \"priority\", \"assignee\", \"due_date\", \"start_date\", \"folder\", \"space\", \"archived\", \"override_statuses\", \"permission_level\"]\r",
											"            }\r",
											"        }\r",
											"    },\r",
											"    required: ['lists']\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"\r",
											"jsonData.lists.forEach(item =>{\r",
											"    console.log(item.id);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/folder/{{Lists_folder_id}}/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"folder",
										"{{Lists_folder_id}}",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Lists / Delete List 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"List1 Deleted\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.eql({});\r",
											"});\r",
											"\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {},\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/list/{{List1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{List1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Lists / Delete List 1 Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"List1 Deleted\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.eql({});\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/list/901510960962",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"901510960962"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Lists / Delete List 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"List2 Deleted\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.eql({});\r",
											"});\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {},\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/list/{{List2_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{List2_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Lists Negative tests",
					"item": [
						{
							"name": "Get Lists / Create List 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var L_name = pm.collectionVariables.get(\"List_random_name\");\r",
											"var L_content = pm.collectionVariables.get(\"List_random_content\");\r",
											"\r",
											"pm.test(`Check that list name is \"${L_name}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_name);\r",
											"});\r",
											"\r",
											"pm.test(`Check that list content is \"${L_content}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_content);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var id = jsonData.id;\r",
											"pm.collectionVariables.set(\"List1_id\", id);\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"id\": { \"type\": \"string\" },\r",
											"        \"name\": { \"type\": \"string\" },\r",
											"        \"deleted\": { \"type\": \"boolean\" },\r",
											"        \"orderindex\": { \"type\": \"number\" },\r",
											"        \"content\": { \"type\": \"string\" },\r",
											"        \"priority\": { \"type\": \"null\" },\r",
											"        \"assignee\": { \"type\": \"null\" },\r",
											"        \"due_date\": { \"type\": \"null\" },\r",
											"        \"start_date\": { \"type\": \"null\" },\r",
											"        \"folder\": {\"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"id\": { \"type\": \"string\" },\r",
											"                \"name\": { \"type\": \"string\" },\r",
											"                \"hidden\": { \"type\": \"boolean\" },\r",
											"                \"access\": { \"type\": \"boolean\" }\r",
											"            }\r",
											"        },\r",
											"        \"space\": {\"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"id\": { \"type\": \"string\" },\r",
											"                \"name\": { \"type\": \"string\" },\r",
											"                \"access\": { \"type\": \"boolean\" }\r",
											"            }\r",
											"        },\r",
											"        \"inbound_address\": { \"type\": \"string\" },\r",
											"        \"archived\": { \"type\": \"boolean\" },\r",
											"        \"override_statuses\": { \"type\": \"boolean\" },\r",
											"        \"statuses\": {\"type\": \"array\",\r",
											"            \"items\": {\"type\": \"object\",\r",
											"                \"properties\": {\r",
											"                    \"id\": { \"type\": \"string\" },\r",
											"                    \"status\": { \"type\": \"string\" },\r",
											"                    \"orderindex\": { \"type\": \"number\" },\r",
											"                    \"color\": { \"type\": \"string\" },\r",
											"                    \"type\": { \"type\": \"string\" },\r",
											"                    \"status_group\": { \"type\": \"string\" }\r",
											"                }\r",
											"            }\r",
											"        },\r",
											"        \"permission_level\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"id\", \"name\", \"deleted\", \"orderindex\", \"content\", \"priority\", \"assignee\", \"due_date\", \"start_date\", \"folder\", \"space\", \"inbound_address\", \"archived\", \"override_statuses\", \"statuses\", \"permission_level\"]\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var name = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"\r",
											"pm.collectionVariables.set(\"List_random_name\", name);\r",
											"\r",
											"var content = pm.variables.replaceIn('{{$randomWords}}');\r",
											"pm.collectionVariables.set(\"List_random_content\", content);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{List_random_name}}\",\r\n    \"content\": \"{{List_random_content}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/folder/{{Lists_folder_id}}/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"folder",
										"{{Lists_folder_id}}",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Lists / Create List 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var L_name2 = pm.collectionVariables.get(\"List2_random_name\");\r",
											"var L_content2 = pm.collectionVariables.get(\"List2_random_content\");\r",
											"\r",
											"pm.test(`Check that list name is \"${L_name2}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_name2);\r",
											"});\r",
											"\r",
											"pm.test(`Check that list content is \"${L_content2}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_content2);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var id = jsonData.id;\r",
											"pm.collectionVariables.set(\"List2_id\", id);\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"id\": { \"type\": \"string\" },\r",
											"        \"name\": { \"type\": \"string\" },\r",
											"        \"deleted\": { \"type\": \"boolean\" },\r",
											"        \"orderindex\": { \"type\": \"number\" },\r",
											"        \"content\": { \"type\": \"string\" },\r",
											"        \"priority\": { \"type\": \"null\" },\r",
											"        \"assignee\": { \"type\": \"null\" },\r",
											"        \"due_date\": { \"type\": \"null\" },\r",
											"        \"start_date\": { \"type\": \"null\" },\r",
											"        \"folder\": {\"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"id\": { \"type\": \"string\" },\r",
											"                \"name\": { \"type\": \"string\" },\r",
											"                \"hidden\": { \"type\": \"boolean\" },\r",
											"                \"access\": { \"type\": \"boolean\" }\r",
											"            }\r",
											"        },\r",
											"        \"space\": {\"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"id\": { \"type\": \"string\" },\r",
											"                \"name\": { \"type\": \"string\" },\r",
											"                \"access\": { \"type\": \"boolean\" }\r",
											"            }\r",
											"        },\r",
											"        \"inbound_address\": { \"type\": \"string\" },\r",
											"        \"archived\": { \"type\": \"boolean\" },\r",
											"        \"override_statuses\": { \"type\": \"boolean\" },\r",
											"        \"statuses\": {\"type\": \"array\",\r",
											"            \"items\": {\"type\": \"object\",\r",
											"                \"properties\": {\r",
											"                    \"id\": { \"type\": \"string\" },\r",
											"                    \"status\": { \"type\": \"string\" },\r",
											"                    \"orderindex\": { \"type\": \"number\" },\r",
											"                    \"color\": { \"type\": \"string\" },\r",
											"                    \"type\": { \"type\": \"string\" },\r",
											"                    \"status_group\": { \"type\": \"string\" }\r",
											"                }\r",
											"            }\r",
											"        },\r",
											"        \"permission_level\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"id\", \"name\", \"deleted\", \"orderindex\", \"content\", \"priority\", \"assignee\", \"due_date\", \"start_date\", \"folder\", \"space\", \"inbound_address\", \"archived\", \"override_statuses\", \"statuses\", \"permission_level\"]\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var name2 = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"\r",
											"pm.collectionVariables.set(\"List2_random_name\", name2);\r",
											"\r",
											"var content2 = pm.variables.replaceIn('{{$randomWords}}');\r",
											"pm.collectionVariables.set(\"List2_random_content\", content2);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{List2_random_name}}\",\r\n    \"content\": \"{{List2_random_content}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/folder/{{Lists_folder_id}}/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"folder",
										"{{Lists_folder_id}}",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Lists / Get Lists  / invaid folder_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Error text check\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Team not authorized\");\r",
											"});\r",
											"pm.test(\"ECODE text check\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"OAUTH_027\");\r",
											"});\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"err\": { \"type\": \"string\" },\r",
											"        \"ECODE\": { \"type\": \"string\" },\r",
											"},\r",
											"\r",
											"    \"required\": [\"err\", \"ECODE\"]\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/folder/123/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"folder",
										"123",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Lists / Get Lists  / invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Error text check\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Token invalid\");\r",
											"});\r",
											"pm.test(\"ECODE text check\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"OAUTH_025\");\r",
											"});\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"err\": { \"type\": \"string\" },\r",
											"        \"ECODE\": { \"type\": \"string\" },\r",
											"},\r",
											"\r",
											"    \"required\": [\"err\", \"ECODE\"]\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "pk_188645185_8T3GZ6VOI0YO22G7GLFG8UAMI3XA6K2I",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/folder/{{Lists_folder_id}}/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"folder",
										"{{Lists_folder_id}}",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Lists / Get Lists  / invalid url",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Error text check\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Route not found\");\r",
											"});\r",
											"pm.test(\"ECODE text check\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"APP_001\");\r",
											"});\r",
											"\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"err\": { \"type\": \"string\" },\r",
											"        \"ECODE\": { \"type\": \"string\" },\r",
											"},\r",
											"\r",
											"    \"required\": [\"err\", \"ECODE\"]\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/folder/{{Lists_folder_id}}/listed",
									"host": [
										"{{url}}"
									],
									"path": [
										"folder",
										"{{Lists_folder_id}}",
										"listed"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Lists / Delete List 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"List1 Deleted\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.eql({});\r",
											"});\r",
											"\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {},\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/list/{{List1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{List1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Lists / Delete List 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"List2 Deleted\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.eql({});\r",
											"});\r",
											"\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {},\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/list/{{List2_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{List2_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Create List",
			"item": [
				{
					"name": "Create List Positive tests",
					"item": [
						{
							"name": "Create List / Create List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var L_name = pm.collectionVariables.get(\"List_random_name\");\r",
											"var L_content = pm.collectionVariables.get(\"List_random_content\");\r",
											"\r",
											"pm.test(`Check that list name is \"${L_name}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_name);\r",
											"});\r",
											"\r",
											"pm.test(`Check that list content is \"${L_content}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_content);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var id = jsonData.id;\r",
											"pm.collectionVariables.set(\"List1_id\", id);\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"id\": { \"type\": \"string\" },\r",
											"        \"name\": { \"type\": \"string\" },\r",
											"        \"deleted\": { \"type\": \"boolean\" },\r",
											"        \"orderindex\": { \"type\": \"number\" },\r",
											"        \"content\": { \"type\": \"string\" },\r",
											"        \"priority\": { \"type\": \"null\" },\r",
											"        \"assignee\": { \"type\": \"null\" },\r",
											"        \"due_date\": { \"type\": \"null\" },\r",
											"        \"start_date\": { \"type\": \"null\" },\r",
											"        \"folder\": {\"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"id\": { \"type\": \"string\" },\r",
											"                \"name\": { \"type\": \"string\" },\r",
											"                \"hidden\": { \"type\": \"boolean\" },\r",
											"                \"access\": { \"type\": \"boolean\" }\r",
											"            }\r",
											"        },\r",
											"        \"space\": {\"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"id\": { \"type\": \"string\" },\r",
											"                \"name\": { \"type\": \"string\" },\r",
											"                \"access\": { \"type\": \"boolean\" }\r",
											"            }\r",
											"        },\r",
											"        \"inbound_address\": { \"type\": \"string\" },\r",
											"        \"archived\": { \"type\": \"boolean\" },\r",
											"        \"override_statuses\": { \"type\": \"boolean\" },\r",
											"        \"statuses\": {\"type\": \"array\",\r",
											"            \"items\": {\"type\": \"object\",\r",
											"                \"properties\": {\r",
											"                    \"id\": { \"type\": \"string\" },\r",
											"                    \"status\": { \"type\": \"string\" },\r",
											"                    \"orderindex\": { \"type\": \"number\" },\r",
											"                    \"color\": { \"type\": \"string\" },\r",
											"                    \"type\": { \"type\": \"string\" },\r",
											"                    \"status_group\": { \"type\": \"string\" }\r",
											"                }\r",
											"            }\r",
											"        },\r",
											"        \"permission_level\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"id\", \"name\", \"deleted\", \"orderindex\", \"content\", \"priority\", \"assignee\", \"due_date\", \"start_date\", \"folder\", \"space\", \"inbound_address\", \"archived\", \"override_statuses\", \"statuses\", \"permission_level\"]\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var name = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"\r",
											"pm.collectionVariables.set(\"List_random_name\", name);\r",
											"\r",
											"var content = pm.variables.replaceIn('{{$randomWords}}');\r",
											"pm.collectionVariables.set(\"List_random_content\", content);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{List_random_name}}\",\r\n    \"content\": \"{{List_random_content}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/folder/{{Lists_folder_id}}/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"folder",
										"{{Lists_folder_id}}",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create List / Get Created List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var L_name = pm.collectionVariables.get(\"List_random_name\");\r",
											"var L_content = pm.collectionVariables.get(\"List_random_content\");\r",
											"\r",
											"pm.test(`Check that list 1 name is \"${L_name}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_name);\r",
											"});\r",
											"\r",
											"pm.test(`Check that list 1 content is \"${L_content}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_content);\r",
											"});\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: 'object',\r",
											"    properties: {        \r",
											"            items: {\r",
											"                type: 'object',\r",
											"                properties: {\r",
											"                    id: { type: 'string' },\r",
											"                    name: { type: 'string' },\r",
											"                    orderindex: { type: 'number' },\r",
											"                    content: { type: 'string' },\r",
											"                    status: { type: ['null', 'string'] },\r",
											"                    priority: { type: ['null', 'string'] },\r",
											"                    assignee: { type: ['null', 'string'] },\r",
											"                    task_count: { type: 'number' },\r",
											"                    due_date: { type: ['null', 'string'] },\r",
											"                    start_date: { type: ['null', 'string'] },\r",
											"                    folder: {\r",
											"                        type: 'object',\r",
											"                        properties: {\r",
											"                            id: { type: 'string' },\r",
											"                            name: { type: 'string' },\r",
											"                            hidden: { type: 'boolean' },\r",
											"                            access: { type: 'boolean' }\r",
											"                        },\r",
											"                        required: ['id', 'name', 'hidden', 'access']\r",
											"                    },\r",
											"                    space: {\r",
											"                        type: 'object',\r",
											"                        properties: {\r",
											"                            id: { type: 'string' },\r",
											"                            name: { type: 'string' },\r",
											"                            access: { type: 'boolean' }\r",
											"                        },\r",
											"                        required: ['id', 'name', 'access']\r",
											"                    },\r",
											"                    archived: { type: 'boolean' },\r",
											"                    override_statuses: { type: 'boolean' },\r",
											"                    permission_level: { type: 'string' }\r",
											"                },\r",
											"                 \"required\": [\"id\", \"name\", \"orderindex\", \"content\", \"priority\", \"assignee\", \"due_date\", \"start_date\", \"folder\", \"space\", \"archived\", \"override_statuses\", \"permission_level\"]\r",
											"            }\r",
											"        }\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/{{List1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{List1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create List / Delete List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"List1 Deleted\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.eql({});\r",
											"});\r",
											"\r",
											"\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {},\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/list/{{List1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{List1_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create List Negative tests",
					"item": [
						{
							"name": "Create List / Create  List / invalid folder_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Error text check\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Team not authorized\");\r",
											"});\r",
											"pm.test(\"ECODE text check\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"OAUTH_027\");\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var id = jsonData.id;\r",
											"pm.collectionVariables.set(\"List_Negative_id\", id);\r",
											"\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"err\": { \"type\": \"string\" },\r",
											"        \"ECODE\": { \"type\": \"string\" },\r",
											"},\r",
											"\r",
											"    \"required\": [\"err\", \"ECODE\"]\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Test_List_1\",\r\n    \"content\": \"List1_content\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/folder/123/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"folder",
										"123",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create List / Delete  List / invalid folder_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error text check\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"validateListIDEx List ID invalid\");\r",
											"});\r",
											"pm.test(\"ECODE text check\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"INPUT_003\");\r",
											"});\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"err\": { \"type\": \"string\" },\r",
											"        \"ECODE\": { \"type\": \"string\" },\r",
											"},\r",
											"\r",
											"    \"required\": [\"err\", \"ECODE\"]\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/list/{{List_Negative_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{List_Negative_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create List / Create List / without name param",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error text check\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"List Name Invalid\");\r",
											"});\r",
											"pm.test(\"ECODE text check\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"SUBCAT_020\");\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var id = jsonData.id;\r",
											"pm.collectionVariables.set(\"List_Negative_id\", id);\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"err\": { \"type\": \"string\" },\r",
											"        \"ECODE\": { \"type\": \"string\" },\r",
											"},\r",
											"\r",
											"    \"required\": [\"err\", \"ECODE\"]\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"content\": \"List1_content\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/folder/{{Lists_folder_id}}/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"folder",
										"{{Lists_folder_id}}",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create List / Delete List / without name param",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error text check\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"validateListIDEx List ID invalid\");\r",
											"});\r",
											"pm.test(\"ECODE text check\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"INPUT_003\");\r",
											"});\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"err\": { \"type\": \"string\" },\r",
											"        \"ECODE\": { \"type\": \"string\" },\r",
											"},\r",
											"\r",
											"    \"required\": [\"err\", \"ECODE\"]\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/list/{{List_Negative_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{List_Negative_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create List / Create List / invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Error text check\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Token invalid\");\r",
											"});\r",
											"pm.test(\"ECODE text check\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"OAUTH_025\");\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var id = jsonData.id;\r",
											"pm.collectionVariables.set(\"List_Negative_id\", id);\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"err\": { \"type\": \"string\" },\r",
											"        \"ECODE\": { \"type\": \"string\" },\r",
											"},\r",
											"\r",
											"    \"required\": [\"err\", \"ECODE\"]\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "pk_188645185_8T3GZ6VOI0YO22G7GLFG8UAMI3XA6K2I",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Test_List_1\",\r\n    \"content\": \"List1_content\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/folder/{{Lists_folder_id}}/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"folder",
										"{{Lists_folder_id}}",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create List / Delete List / invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error text check\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"validateListIDEx List ID invalid\");\r",
											"});\r",
											"pm.test(\"ECODE text check\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"INPUT_003\");\r",
											"});\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"err\": { \"type\": \"string\" },\r",
											"        \"ECODE\": { \"type\": \"string\" },\r",
											"},\r",
											"\r",
											"    \"required\": [\"err\", \"ECODE\"]\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/list/{{List_Negative_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{List_Negative_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create List / Create List / unreal token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Error text check\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Oauth token not found\");\r",
											"});\r",
											"pm.test(\"ECODE text check\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"OAUTH_019\");\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"var id = jsonData.id;\r",
											"pm.collectionVariables.set(\"List_Negative_id\", id);\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"err\": { \"type\": \"string\" },\r",
											"        \"ECODE\": { \"type\": \"string\" },\r",
											"},\r",
											"\r",
											"    \"required\": [\"err\", \"ECODE\"]\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "123",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Test_List_1\",\r\n    \"content\": \"List1_content\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/folder/{{Lists_folder_id}}/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"folder",
										"{{Lists_folder_id}}",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create List / Delete List / unreal token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error text check\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"validateListIDEx List ID invalid\");\r",
											"});\r",
											"pm.test(\"ECODE text check\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"INPUT_003\");\r",
											"});\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"err\": { \"type\": \"string\" },\r",
											"        \"ECODE\": { \"type\": \"string\" },\r",
											"},\r",
											"\r",
											"    \"required\": [\"err\", \"ECODE\"]\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/list/{{List_Negative_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{List_Negative_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Get List",
			"item": [
				{
					"name": "Get List Positive tests",
					"item": [
						{
							"name": "Get List / Create List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var L_name = pm.collectionVariables.get(\"List_random_name\");\r",
											"var L_content = pm.collectionVariables.get(\"List_random_content\");\r",
											"\r",
											"pm.test(`Check that list name is \"${L_name}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_name);\r",
											"});\r",
											"\r",
											"pm.test(`Check that list content is \"${L_content}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_content);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var id = jsonData.id;\r",
											"pm.collectionVariables.set(\"List1_id\", id);\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"id\": { \"type\": \"string\" },\r",
											"        \"name\": { \"type\": \"string\" },\r",
											"        \"deleted\": { \"type\": \"boolean\" },\r",
											"        \"orderindex\": { \"type\": \"number\" },\r",
											"        \"content\": { \"type\": \"string\" },\r",
											"        \"priority\": { \"type\": \"null\" },\r",
											"        \"assignee\": { \"type\": \"null\" },\r",
											"        \"due_date\": { \"type\": \"null\" },\r",
											"        \"start_date\": { \"type\": \"null\" },\r",
											"        \"folder\": {\"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"id\": { \"type\": \"string\" },\r",
											"                \"name\": { \"type\": \"string\" },\r",
											"                \"hidden\": { \"type\": \"boolean\" },\r",
											"                \"access\": { \"type\": \"boolean\" }\r",
											"            }\r",
											"        },\r",
											"        \"space\": {\"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"id\": { \"type\": \"string\" },\r",
											"                \"name\": { \"type\": \"string\" },\r",
											"                \"access\": { \"type\": \"boolean\" }\r",
											"            }\r",
											"        },\r",
											"        \"inbound_address\": { \"type\": \"string\" },\r",
											"        \"archived\": { \"type\": \"boolean\" },\r",
											"        \"override_statuses\": { \"type\": \"boolean\" },\r",
											"        \"statuses\": {\"type\": \"array\",\r",
											"            \"items\": {\"type\": \"object\",\r",
											"                \"properties\": {\r",
											"                    \"id\": { \"type\": \"string\" },\r",
											"                    \"status\": { \"type\": \"string\" },\r",
											"                    \"orderindex\": { \"type\": \"number\" },\r",
											"                    \"color\": { \"type\": \"string\" },\r",
											"                    \"type\": { \"type\": \"string\" },\r",
											"                    \"status_group\": { \"type\": \"string\" }\r",
											"                }\r",
											"            }\r",
											"        },\r",
											"        \"permission_level\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"id\", \"name\", \"deleted\", \"orderindex\", \"content\", \"priority\", \"assignee\", \"due_date\", \"start_date\", \"folder\", \"space\", \"inbound_address\", \"archived\", \"override_statuses\", \"statuses\", \"permission_level\"]\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var name = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"\r",
											"pm.collectionVariables.set(\"List_random_name\", name);\r",
											"\r",
											"var content = pm.variables.replaceIn('{{$randomWords}}');\r",
											"pm.collectionVariables.set(\"List_random_content\", content);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{List_random_name}}\",\r\n    \"content\": \"{{List_random_content}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/folder/{{Lists_folder_id}}/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"folder",
										"{{Lists_folder_id}}",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get List / Get List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var L_name = pm.collectionVariables.get(\"List_random_name\");\r",
											"var L_content = pm.collectionVariables.get(\"List_random_content\");\r",
											"\r",
											"pm.test(`Check that list 1 name is \"${L_name}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_name);\r",
											"});\r",
											"\r",
											"pm.test(`Check that list 1 content is \"${L_content}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_content);\r",
											"});\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: 'object',\r",
											"    properties: {        \r",
											"            items: {\r",
											"                type: 'object',\r",
											"                properties: {\r",
											"                    id: { type: 'string' },\r",
											"                    name: { type: 'string' },\r",
											"                    orderindex: { type: 'number' },\r",
											"                    content: { type: 'string' },\r",
											"                    status: { type: ['null', 'string'] },\r",
											"                    priority: { type: ['null', 'string'] },\r",
											"                    assignee: { type: ['null', 'string'] },\r",
											"                    task_count: { type: 'number' },\r",
											"                    due_date: { type: ['null', 'string'] },\r",
											"                    start_date: { type: ['null', 'string'] },\r",
											"                    folder: {\r",
											"                        type: 'object',\r",
											"                        properties: {\r",
											"                            id: { type: 'string' },\r",
											"                            name: { type: 'string' },\r",
											"                            hidden: { type: 'boolean' },\r",
											"                            access: { type: 'boolean' }\r",
											"                        },\r",
											"                        required: ['id', 'name', 'hidden', 'access']\r",
											"                    },\r",
											"                    space: {\r",
											"                        type: 'object',\r",
											"                        properties: {\r",
											"                            id: { type: 'string' },\r",
											"                            name: { type: 'string' },\r",
											"                            access: { type: 'boolean' }\r",
											"                        },\r",
											"                        required: ['id', 'name', 'access']\r",
											"                    },\r",
											"                    archived: { type: 'boolean' },\r",
											"                    override_statuses: { type: 'boolean' },\r",
											"                    permission_level: { type: 'string' }\r",
											"                },\r",
											"                 \"required\": [\"id\", \"name\", \"orderindex\", \"content\", \"priority\", \"assignee\", \"due_date\", \"start_date\", \"folder\", \"space\", \"archived\", \"override_statuses\", \"permission_level\"]\r",
											"            }\r",
											"        }\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/{{List1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{List1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get List / Delete List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"List1 Deleted\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.eql({});\r",
											"});\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {},\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/list/{{List1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{List1_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get List Request in prescript",
					"item": [
						{
							"name": "Get List / Get List / Request in prescript",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var L_name = pm.collectionVariables.get(\"List_random_name\");\r",
											"var L_content = pm.collectionVariables.get(\"List_random_content\");\r",
											"\r",
											"pm.test(`Check that list 1 name is \"${L_name}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_name);\r",
											"});\r",
											"\r",
											"pm.test(`Check that list 1 content is \"${L_content}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_content);\r",
											"});\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: 'object',\r",
											"    properties: {        \r",
											"            items: {\r",
											"                type: 'object',\r",
											"                properties: {\r",
											"                    id: { type: 'string' },\r",
											"                    name: { type: 'string' },\r",
											"                    orderindex: { type: 'number' },\r",
											"                    content: { type: 'string' },\r",
											"                    status: { type: ['null', 'string'] },\r",
											"                    priority: { type: ['null', 'string'] },\r",
											"                    assignee: { type: ['null', 'string'] },\r",
											"                    task_count: { type: 'number' },\r",
											"                    due_date: { type: ['null', 'string'] },\r",
											"                    start_date: { type: ['null', 'string'] },\r",
											"                    folder: {\r",
											"                        type: 'object',\r",
											"                        properties: {\r",
											"                            id: { type: 'string' },\r",
											"                            name: { type: 'string' },\r",
											"                            hidden: { type: 'boolean' },\r",
											"                            access: { type: 'boolean' }\r",
											"                        },\r",
											"                        required: ['id', 'name', 'hidden', 'access']\r",
											"                    },\r",
											"                    space: {\r",
											"                        type: 'object',\r",
											"                        properties: {\r",
											"                            id: { type: 'string' },\r",
											"                            name: { type: 'string' },\r",
											"                            access: { type: 'boolean' }\r",
											"                        },\r",
											"                        required: ['id', 'name', 'access']\r",
											"                    },\r",
											"                    archived: { type: 'boolean' },\r",
											"                    override_statuses: { type: 'boolean' },\r",
											"                    permission_level: { type: 'string' }\r",
											"                },\r",
											"                 \"required\": [\"id\", \"name\", \"orderindex\", \"content\", \"priority\", \"assignee\", \"due_date\", \"start_date\", \"folder\", \"space\", \"archived\", \"override_statuses\", \"permission_level\"]\r",
											"            }\r",
											"        }\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											"\r",
											"/// Видалення\r",
											"const token = pm.variables.replaceIn('{{token}}');\r",
											"const id = pm.variables.replaceIn('{{Listpre_id}}');\r",
											"const url = pm.variables.replaceIn('{{url}}');\r",
											"(async () => {  try {\r",
											"    const response = await pm.sendRequest({\r",
											"        url: `${url}/list/${id}`,\r",
											"        method: \"DELETE\",\r",
											"        header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': `${token}`\r",
											"    }\r",
											"    });\r",
											"} catch (err) {\r",
											"    console.error(err);\r",
											"}}) ()\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const name = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"pm.collectionVariables.set(\"List_random_name\", name);\r",
											"const content = pm.variables.replaceIn('{{$randomWords}}');\r",
											"pm.collectionVariables.set(\"List_random_content\", content);\r",
											"const token = pm.variables.replaceIn('{{token}}');\r",
											"const url = pm.variables.replaceIn('{{url}}');\r",
											"const folder_id = pm.variables.replaceIn('{{Lists_folder_id}}');\r",
											"/// Створення\r",
											"pm.sendRequest({\r",
											"\r",
											"    url: `${url}/folder/${folder_id}/list`,\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"         'Authorization': `${token}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({ \r",
											"            name: name, \r",
											"            content: content \r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.error(\"Request error:\", err);\r",
											"        return;\r",
											"    }\r",
											"     (async () => {  \r",
											"        try {\r",
											"            const contentType = res.headers.get(\"Content-Type\");\r",
											"            const jsonData = res.json();\r",
											"            const id = jsonData.id;\r",
											"                pm.collectionVariables.set(\"Listpre_id\", id);\r",
											"      \r",
											"    }   catch (e) {\r",
											"        console.error(\"❌ Failed to parse JSON:\", e);\r",
											"    }\r",
											"     }) ()\r",
											"    \r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/list/{{Listpre_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{Listpre_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get List Negative tests",
					"item": [
						{
							"name": "Get List / Create List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var L_name = pm.collectionVariables.get(\"List_random_name\");\r",
											"var L_content = pm.collectionVariables.get(\"List_random_content\");\r",
											"\r",
											"pm.test(`Check that list name is \"${L_name}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_name);\r",
											"});\r",
											"\r",
											"pm.test(`Check that list content is \"${L_content}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_content);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var id = jsonData.id;\r",
											"pm.collectionVariables.set(\"List1_id\", id);\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"id\": { \"type\": \"string\" },\r",
											"        \"name\": { \"type\": \"string\" },\r",
											"        \"deleted\": { \"type\": \"boolean\" },\r",
											"        \"orderindex\": { \"type\": \"number\" },\r",
											"        \"content\": { \"type\": \"string\" },\r",
											"        \"priority\": { \"type\": \"null\" },\r",
											"        \"assignee\": { \"type\": \"null\" },\r",
											"        \"due_date\": { \"type\": \"null\" },\r",
											"        \"start_date\": { \"type\": \"null\" },\r",
											"        \"folder\": {\"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"id\": { \"type\": \"string\" },\r",
											"                \"name\": { \"type\": \"string\" },\r",
											"                \"hidden\": { \"type\": \"boolean\" },\r",
											"                \"access\": { \"type\": \"boolean\" }\r",
											"            }\r",
											"        },\r",
											"        \"space\": {\"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"id\": { \"type\": \"string\" },\r",
											"                \"name\": { \"type\": \"string\" },\r",
											"                \"access\": { \"type\": \"boolean\" }\r",
											"            }\r",
											"        },\r",
											"        \"inbound_address\": { \"type\": \"string\" },\r",
											"        \"archived\": { \"type\": \"boolean\" },\r",
											"        \"override_statuses\": { \"type\": \"boolean\" },\r",
											"        \"statuses\": {\"type\": \"array\",\r",
											"            \"items\": {\"type\": \"object\",\r",
											"                \"properties\": {\r",
											"                    \"id\": { \"type\": \"string\" },\r",
											"                    \"status\": { \"type\": \"string\" },\r",
											"                    \"orderindex\": { \"type\": \"number\" },\r",
											"                    \"color\": { \"type\": \"string\" },\r",
											"                    \"type\": { \"type\": \"string\" },\r",
											"                    \"status_group\": { \"type\": \"string\" }\r",
											"                }\r",
											"            }\r",
											"        },\r",
											"        \"permission_level\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"id\", \"name\", \"deleted\", \"orderindex\", \"content\", \"priority\", \"assignee\", \"due_date\", \"start_date\", \"folder\", \"space\", \"inbound_address\", \"archived\", \"override_statuses\", \"statuses\", \"permission_level\"]\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var name = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"\r",
											"pm.collectionVariables.set(\"List_random_name\", name);\r",
											"\r",
											"var content = pm.variables.replaceIn('{{$randomWords}}');\r",
											"pm.collectionVariables.set(\"List_random_content\", content);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{List_random_name}}\",\r\n    \"content\": \"{{List_random_content}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/folder/{{Lists_folder_id}}/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"folder",
										"{{Lists_folder_id}}",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get List / Get List / invaid list_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Error text check\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Team not authorized\");\r",
											"});\r",
											"pm.test(\"ECODE text check\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"OAUTH_027\");\r",
											"});\r",
											"\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"err\": { \"type\": \"string\" },\r",
											"        \"ECODE\": { \"type\": \"string\" },\r",
											"},\r",
											"\r",
											"    \"required\": [\"err\", \"ECODE\"]\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/123",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"123"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get List / Get List / invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Error text check\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Token invalid\");\r",
											"});\r",
											"pm.test(\"ECODE text check\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"OAUTH_025\");\r",
											"});\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"err\": { \"type\": \"string\" },\r",
											"        \"ECODE\": { \"type\": \"string\" },\r",
											"},\r",
											"\r",
											"    \"required\": [\"err\", \"ECODE\"]\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "pk_188645185_8T3GZ6VOI0YO22G7GLFG8UAMI3XA6K2I",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/{{List1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{List1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get List / Get List  / invalid url",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Error text check\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Route not found\");\r",
											"});\r",
											"pm.test(\"ECODE text check\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"APP_001\");\r",
											"});\r",
											"\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"err\": { \"type\": \"string\" },\r",
											"        \"ECODE\": { \"type\": \"string\" },\r",
											"},\r",
											"\r",
											"    \"required\": [\"err\", \"ECODE\"]\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/{{List1_id}}/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{List1_id}}",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get List / Delete List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"List1 Deleted\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.eql({});\r",
											"});\r",
											"\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {},\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/list/{{List1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{List1_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Update List",
			"item": [
				{
					"name": "Update List Positive tests",
					"item": [
						{
							"name": "Update List / Create List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var L_name = pm.collectionVariables.get(\"List_random_name\");\r",
											"var L_content = pm.collectionVariables.get(\"List_random_content\");\r",
											"\r",
											"pm.test(`Check that list name is \"${L_name}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_name);\r",
											"});\r",
											"\r",
											"pm.test(`Check that list content is \"${L_content}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_content);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var id = jsonData.id;\r",
											"pm.collectionVariables.set(\"List1_id\", id);\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"id\": { \"type\": \"string\" },\r",
											"        \"name\": { \"type\": \"string\" },\r",
											"        \"deleted\": { \"type\": \"boolean\" },\r",
											"        \"orderindex\": { \"type\": \"number\" },\r",
											"        \"content\": { \"type\": \"string\" },\r",
											"        \"priority\": { \"type\": \"null\" },\r",
											"        \"assignee\": { \"type\": \"null\" },\r",
											"        \"due_date\": { \"type\": \"null\" },\r",
											"        \"start_date\": { \"type\": \"null\" },\r",
											"        \"folder\": {\"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"id\": { \"type\": \"string\" },\r",
											"                \"name\": { \"type\": \"string\" },\r",
											"                \"hidden\": { \"type\": \"boolean\" },\r",
											"                \"access\": { \"type\": \"boolean\" }\r",
											"            }\r",
											"        },\r",
											"        \"space\": {\"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"id\": { \"type\": \"string\" },\r",
											"                \"name\": { \"type\": \"string\" },\r",
											"                \"access\": { \"type\": \"boolean\" }\r",
											"            }\r",
											"        },\r",
											"        \"inbound_address\": { \"type\": \"string\" },\r",
											"        \"archived\": { \"type\": \"boolean\" },\r",
											"        \"override_statuses\": { \"type\": \"boolean\" },\r",
											"        \"statuses\": {\"type\": \"array\",\r",
											"            \"items\": {\"type\": \"object\",\r",
											"                \"properties\": {\r",
											"                    \"id\": { \"type\": \"string\" },\r",
											"                    \"status\": { \"type\": \"string\" },\r",
											"                    \"orderindex\": { \"type\": \"number\" },\r",
											"                    \"color\": { \"type\": \"string\" },\r",
											"                    \"type\": { \"type\": \"string\" },\r",
											"                    \"status_group\": { \"type\": \"string\" }\r",
											"                }\r",
											"            }\r",
											"        },\r",
											"        \"permission_level\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"id\", \"name\", \"deleted\", \"orderindex\", \"content\", \"priority\", \"assignee\", \"due_date\", \"start_date\", \"folder\", \"space\", \"inbound_address\", \"archived\", \"override_statuses\", \"statuses\", \"permission_level\"]\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var name = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"\r",
											"pm.collectionVariables.set(\"List_random_name\", name);\r",
											"\r",
											"var content = pm.variables.replaceIn('{{$randomWords}}');\r",
											"pm.collectionVariables.set(\"List_random_content\", content);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{List_random_name}}\",\r\n    \"content\": \"{{List_random_content}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/folder/{{Lists_folder_id}}/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"folder",
										"{{Lists_folder_id}}",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update  List / Get List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var L_name = pm.collectionVariables.get(\"List_random_name\");\r",
											"var L_content = pm.collectionVariables.get(\"List_random_content\");\r",
											"\r",
											"pm.test(`Check that list 1 name is \"${L_name}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_name);\r",
											"});\r",
											"\r",
											"pm.test(`Check that list 1 content is \"${L_content}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_content);\r",
											"});\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: 'object',\r",
											"    properties: {        \r",
											"            items: {\r",
											"                type: 'object',\r",
											"                properties: {\r",
											"                    id: { type: 'string' },\r",
											"                    name: { type: 'string' },\r",
											"                    orderindex: { type: 'number' },\r",
											"                    content: { type: 'string' },\r",
											"                    status: { type: ['null', 'string'] },\r",
											"                    priority: { type: ['null', 'string'] },\r",
											"                    assignee: { type: ['null', 'string'] },\r",
											"                    task_count: { type: 'number' },\r",
											"                    due_date: { type: ['null', 'string'] },\r",
											"                    start_date: { type: ['null', 'string'] },\r",
											"                    folder: {\r",
											"                        type: 'object',\r",
											"                        properties: {\r",
											"                            id: { type: 'string' },\r",
											"                            name: { type: 'string' },\r",
											"                            hidden: { type: 'boolean' },\r",
											"                            access: { type: 'boolean' }\r",
											"                        },\r",
											"                        required: ['id', 'name', 'hidden', 'access']\r",
											"                    },\r",
											"                    space: {\r",
											"                        type: 'object',\r",
											"                        properties: {\r",
											"                            id: { type: 'string' },\r",
											"                            name: { type: 'string' },\r",
											"                            access: { type: 'boolean' }\r",
											"                        },\r",
											"                        required: ['id', 'name', 'access']\r",
											"                    },\r",
											"                    archived: { type: 'boolean' },\r",
											"                    override_statuses: { type: 'boolean' },\r",
											"                    permission_level: { type: 'string' }\r",
											"                },\r",
											"                 \"required\": [\"id\", \"name\", \"orderindex\", \"content\", \"priority\", \"assignee\", \"due_date\", \"start_date\", \"folder\", \"space\", \"archived\", \"override_statuses\", \"permission_level\"]\r",
											"            }\r",
											"        }\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/{{List1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{List1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update List / Update List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var L_name = pm.collectionVariables.get(\"UPD_List_random_name\");\r",
											"var L_content = pm.collectionVariables.get(\"UPD_List_random_content\");\r",
											"\r",
											"pm.test(`Check that updated list name is \"${L_name}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_name);\r",
											"});\r",
											"\r",
											"pm.test(`Check that updated list content is \"${L_content}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_content);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var id = jsonData.id;\r",
											"pm.collectionVariables.set(\"List1_id\", id);\r",
											"\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"id\": { \"type\": \"string\" },\r",
											"        \"name\": { \"type\": \"string\" },\r",
											"        \"deleted\": { \"type\": \"boolean\" },\r",
											"        \"orderindex\": { \"type\": \"number\" },\r",
											"        \"content\": { \"type\": \"string\" },\r",
											"        \"priority\": { \"type\": \"null\" },\r",
											"        \"assignee\": { \"type\": \"null\" },\r",
											"        \"due_date\": { \"type\": \"null\" },\r",
											"        \"start_date\": { \"type\": \"null\" },\r",
											"        \"folder\": {\"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"id\": { \"type\": \"string\" },\r",
											"                \"name\": { \"type\": \"string\" },\r",
											"                \"hidden\": { \"type\": \"boolean\" },\r",
											"                \"access\": { \"type\": \"boolean\" }\r",
											"            }\r",
											"        },\r",
											"        \"space\": {\"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"id\": { \"type\": \"string\" },\r",
											"                \"name\": { \"type\": \"string\" },\r",
											"                \"access\": { \"type\": \"boolean\" }\r",
											"            }\r",
											"        },\r",
											"        \"inbound_address\": { \"type\": \"string\" },\r",
											"        \"archived\": { \"type\": \"boolean\" },\r",
											"        \"override_statuses\": { \"type\": \"boolean\" },\r",
											"        \"statuses\": {\"type\": \"array\",\r",
											"            \"items\": {\"type\": \"object\",\r",
											"                \"properties\": {\r",
											"                    \"id\": { \"type\": \"string\" },\r",
											"                    \"status\": { \"type\": \"string\" },\r",
											"                    \"orderindex\": { \"type\": \"number\" },\r",
											"                    \"color\": { \"type\": \"string\" },\r",
											"                    \"type\": { \"type\": \"string\" },\r",
											"                    \"status_group\": { \"type\": \"string\" }\r",
											"                }\r",
											"            }\r",
											"        },\r",
											"        \"permission_level\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"id\", \"name\", \"deleted\", \"orderindex\", \"content\", \"priority\", \"assignee\", \"due_date\", \"start_date\", \"folder\", \"space\", \"inbound_address\", \"archived\", \"override_statuses\", \"statuses\", \"permission_level\"]\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var upd_name = pm.variables.replaceIn('Updated {{$randomFirstName}}');\r",
											"\r",
											"pm.collectionVariables.set(\"UPD_List_random_name\", upd_name);\r",
											"\r",
											"var upd_content = pm.variables.replaceIn('Updated {{$randomWords}}');\r",
											"pm.collectionVariables.set(\"UPD_List_random_content\", upd_content);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{UPD_List_random_name}}\",\r\n    \"content\": \"{{UPD_List_random_content}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/list/{{List1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{List1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update  List / Get Updated List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var L_name = pm.collectionVariables.get(\"UPD_List_random_name\");\r",
											"var L_content = pm.collectionVariables.get(\"UPD_List_random_content\");\r",
											"\r",
											"pm.test(`Check that updated list name is \"${L_name}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_name);\r",
											"});\r",
											"\r",
											"pm.test(`Check that updated list content is \"${L_content}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_content);\r",
											"});\r",
											"\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: 'object',\r",
											"    properties: {        \r",
											"            items: {\r",
											"                type: 'object',\r",
											"                properties: {\r",
											"                    id: { type: 'string' },\r",
											"                    name: { type: 'string' },\r",
											"                    orderindex: { type: 'number' },\r",
											"                    content: { type: 'string' },\r",
											"                    status: { type: ['null', 'string'] },\r",
											"                    priority: { type: ['null', 'string'] },\r",
											"                    assignee: { type: ['null', 'string'] },\r",
											"                    task_count: { type: 'number' },\r",
											"                    due_date: { type: ['null', 'string'] },\r",
											"                    start_date: { type: ['null', 'string'] },\r",
											"                    folder: {\r",
											"                        type: 'object',\r",
											"                        properties: {\r",
											"                            id: { type: 'string' },\r",
											"                            name: { type: 'string' },\r",
											"                            hidden: { type: 'boolean' },\r",
											"                            access: { type: 'boolean' }\r",
											"                        },\r",
											"                        required: ['id', 'name', 'hidden', 'access']\r",
											"                    },\r",
											"                    space: {\r",
											"                        type: 'object',\r",
											"                        properties: {\r",
											"                            id: { type: 'string' },\r",
											"                            name: { type: 'string' },\r",
											"                            access: { type: 'boolean' }\r",
											"                        },\r",
											"                        required: ['id', 'name', 'access']\r",
											"                    },\r",
											"                    archived: { type: 'boolean' },\r",
											"                    override_statuses: { type: 'boolean' },\r",
											"                    permission_level: { type: 'string' }\r",
											"                },\r",
											"                 \"required\": [\"id\", \"name\", \"orderindex\", \"content\", \"priority\", \"assignee\", \"due_date\", \"start_date\", \"folder\", \"space\", \"archived\", \"override_statuses\", \"permission_level\"]\r",
											"            }\r",
											"        }\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/{{List1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{List1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update  List / Delete List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"List1 Deleted\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.eql({});\r",
											"});\r",
											"\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {},\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Updated_Test_List\",\r\n    \"content\": \"Updates_List_content\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/list/{{List1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{List1_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update List Negative tests",
					"item": [
						{
							"name": "Update List / Create List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var L_name = pm.collectionVariables.get(\"List_random_name\");\r",
											"var L_content = pm.collectionVariables.get(\"List_random_content\");\r",
											"\r",
											"pm.test(`Check that list name is \"${L_name}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_name);\r",
											"});\r",
											"\r",
											"pm.test(`Check that list content is \"${L_content}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_content);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var id = jsonData.id;\r",
											"pm.collectionVariables.set(\"List1_id\", id);\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"id\": { \"type\": \"string\" },\r",
											"        \"name\": { \"type\": \"string\" },\r",
											"        \"deleted\": { \"type\": \"boolean\" },\r",
											"        \"orderindex\": { \"type\": \"number\" },\r",
											"        \"content\": { \"type\": \"string\" },\r",
											"        \"priority\": { \"type\": \"null\" },\r",
											"        \"assignee\": { \"type\": \"null\" },\r",
											"        \"due_date\": { \"type\": \"null\" },\r",
											"        \"start_date\": { \"type\": \"null\" },\r",
											"        \"folder\": {\"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"id\": { \"type\": \"string\" },\r",
											"                \"name\": { \"type\": \"string\" },\r",
											"                \"hidden\": { \"type\": \"boolean\" },\r",
											"                \"access\": { \"type\": \"boolean\" }\r",
											"            }\r",
											"        },\r",
											"        \"space\": {\"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"id\": { \"type\": \"string\" },\r",
											"                \"name\": { \"type\": \"string\" },\r",
											"                \"access\": { \"type\": \"boolean\" }\r",
											"            }\r",
											"        },\r",
											"        \"inbound_address\": { \"type\": \"string\" },\r",
											"        \"archived\": { \"type\": \"boolean\" },\r",
											"        \"override_statuses\": { \"type\": \"boolean\" },\r",
											"        \"statuses\": {\"type\": \"array\",\r",
											"            \"items\": {\"type\": \"object\",\r",
											"                \"properties\": {\r",
											"                    \"id\": { \"type\": \"string\" },\r",
											"                    \"status\": { \"type\": \"string\" },\r",
											"                    \"orderindex\": { \"type\": \"number\" },\r",
											"                    \"color\": { \"type\": \"string\" },\r",
											"                    \"type\": { \"type\": \"string\" },\r",
											"                    \"status_group\": { \"type\": \"string\" }\r",
											"                }\r",
											"            }\r",
											"        },\r",
											"        \"permission_level\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"id\", \"name\", \"deleted\", \"orderindex\", \"content\", \"priority\", \"assignee\", \"due_date\", \"start_date\", \"folder\", \"space\", \"inbound_address\", \"archived\", \"override_statuses\", \"statuses\", \"permission_level\"]\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var name = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"\r",
											"pm.collectionVariables.set(\"List_random_name\", name);\r",
											"\r",
											"var content = pm.variables.replaceIn('{{$randomWords}}');\r",
											"pm.collectionVariables.set(\"List_random_content\", content);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{List_random_name}}\",\r\n    \"content\": \"{{List_random_content}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/folder/{{Lists_folder_id}}/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"folder",
										"{{Lists_folder_id}}",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update List / Update List / with empty name param",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error text check\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"List Name Invalid\");\r",
											"});\r",
											"pm.test(\"ECODE text check\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"SUBCAT_020\");\r",
											"});\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"err\": { \"type\": \"string\" },\r",
											"        \"ECODE\": { \"type\": \"string\" },\r",
											"},\r",
											"\r",
											"    \"required\": [\"err\", \"ECODE\"]\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/list/{{List1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{List1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update  List / Get Updated List / with empty name param",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var L_name = pm.collectionVariables.get(\"List_random_name\");\r",
											"var L_content = pm.collectionVariables.get(\"List_random_content\");\r",
											"\r",
											"pm.test(`Check that list 1 name is \"${L_name}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_name);\r",
											"});\r",
											"\r",
											"pm.test(`Check that list 1 content is \"${L_content}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_content);\r",
											"});\r",
											"\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: 'object',\r",
											"    properties: {        \r",
											"            items: {\r",
											"                type: 'object',\r",
											"                properties: {\r",
											"                    id: { type: 'string' },\r",
											"                    name: { type: 'string' },\r",
											"                    orderindex: { type: 'number' },\r",
											"                    content: { type: 'string' },\r",
											"                    status: { type: ['null', 'string'] },\r",
											"                    priority: { type: ['null', 'string'] },\r",
											"                    assignee: { type: ['null', 'string'] },\r",
											"                    task_count: { type: 'number' },\r",
											"                    due_date: { type: ['null', 'string'] },\r",
											"                    start_date: { type: ['null', 'string'] },\r",
											"                    folder: {\r",
											"                        type: 'object',\r",
											"                        properties: {\r",
											"                            id: { type: 'string' },\r",
											"                            name: { type: 'string' },\r",
											"                            hidden: { type: 'boolean' },\r",
											"                            access: { type: 'boolean' }\r",
											"                        },\r",
											"                        required: ['id', 'name', 'hidden', 'access']\r",
											"                    },\r",
											"                    space: {\r",
											"                        type: 'object',\r",
											"                        properties: {\r",
											"                            id: { type: 'string' },\r",
											"                            name: { type: 'string' },\r",
											"                            access: { type: 'boolean' }\r",
											"                        },\r",
											"                        required: ['id', 'name', 'access']\r",
											"                    },\r",
											"                    archived: { type: 'boolean' },\r",
											"                    override_statuses: { type: 'boolean' },\r",
											"                    permission_level: { type: 'string' }\r",
											"                },\r",
											"                 \"required\": [\"id\", \"name\", \"orderindex\", \"content\", \"priority\", \"assignee\", \"due_date\", \"start_date\", \"folder\", \"space\", \"archived\", \"override_statuses\", \"permission_level\"]\r",
											"            }\r",
											"        }\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/{{List1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{List1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update List / Update List / with invalid list_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Error text check\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Team not authorized\");\r",
											"});\r",
											"pm.test(\"ECODE text check\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"OAUTH_027\");\r",
											"});\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"err\": { \"type\": \"string\" },\r",
											"        \"ECODE\": { \"type\": \"string\" },\r",
											"},\r",
											"\r",
											"    \"required\": [\"err\", \"ECODE\"]\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Updated_Test_List\",\r\n    \"content\": \"Updated_List_content\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/list/123",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"123"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update  List / Get Updated List / with invalid list_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var L_name = pm.collectionVariables.get(\"List_random_name\");\r",
											"var L_content = pm.collectionVariables.get(\"List_random_content\");\r",
											"\r",
											"pm.test(`Check that list 1 name is \"${L_name}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_name);\r",
											"});\r",
											"\r",
											"pm.test(`Check that list 1 content is \"${L_content}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_content);\r",
											"});\r",
											"\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: 'object',\r",
											"    properties: {        \r",
											"            items: {\r",
											"                type: 'object',\r",
											"                properties: {\r",
											"                    id: { type: 'string' },\r",
											"                    name: { type: 'string' },\r",
											"                    orderindex: { type: 'number' },\r",
											"                    content: { type: 'string' },\r",
											"                    status: { type: ['null', 'string'] },\r",
											"                    priority: { type: ['null', 'string'] },\r",
											"                    assignee: { type: ['null', 'string'] },\r",
											"                    task_count: { type: 'number' },\r",
											"                    due_date: { type: ['null', 'string'] },\r",
											"                    start_date: { type: ['null', 'string'] },\r",
											"                    folder: {\r",
											"                        type: 'object',\r",
											"                        properties: {\r",
											"                            id: { type: 'string' },\r",
											"                            name: { type: 'string' },\r",
											"                            hidden: { type: 'boolean' },\r",
											"                            access: { type: 'boolean' }\r",
											"                        },\r",
											"                        required: ['id', 'name', 'hidden', 'access']\r",
											"                    },\r",
											"                    space: {\r",
											"                        type: 'object',\r",
											"                        properties: {\r",
											"                            id: { type: 'string' },\r",
											"                            name: { type: 'string' },\r",
											"                            access: { type: 'boolean' }\r",
											"                        },\r",
											"                        required: ['id', 'name', 'access']\r",
											"                    },\r",
											"                    archived: { type: 'boolean' },\r",
											"                    override_statuses: { type: 'boolean' },\r",
											"                    permission_level: { type: 'string' }\r",
											"                },\r",
											"                 \"required\": [\"id\", \"name\", \"orderindex\", \"content\", \"priority\", \"assignee\", \"due_date\", \"start_date\", \"folder\", \"space\", \"archived\", \"override_statuses\", \"permission_level\"]\r",
											"            }\r",
											"        }\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/{{List1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{List1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update List / Update List / with invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Error text check\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Token invalid\");\r",
											"});\r",
											"pm.test(\"ECODE text check\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"OAUTH_025\");\r",
											"});\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"err\": { \"type\": \"string\" },\r",
											"        \"ECODE\": { \"type\": \"string\" },\r",
											"},\r",
											"\r",
											"    \"required\": [\"err\", \"ECODE\"]\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "pk_188645185_7T3GZ6VOI0YO22G7GLFG8UAMI3XA6K2O",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Updated_Test_List\",\r\n    \"content\": \"Updated_List_content\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/list/{{List1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{List1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update  List / Get Updated List / with invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var L_name = pm.collectionVariables.get(\"List_random_name\");\r",
											"var L_content = pm.collectionVariables.get(\"List_random_content\");\r",
											"\r",
											"pm.test(`Check that list 1 name is \"${L_name}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_name);\r",
											"});\r",
											"\r",
											"pm.test(`Check that list 1 content is \"${L_content}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_content);\r",
											"});\r",
											"\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: 'object',\r",
											"    properties: {        \r",
											"            items: {\r",
											"                type: 'object',\r",
											"                properties: {\r",
											"                    id: { type: 'string' },\r",
											"                    name: { type: 'string' },\r",
											"                    orderindex: { type: 'number' },\r",
											"                    content: { type: 'string' },\r",
											"                    status: { type: ['null', 'string'] },\r",
											"                    priority: { type: ['null', 'string'] },\r",
											"                    assignee: { type: ['null', 'string'] },\r",
											"                    task_count: { type: 'number' },\r",
											"                    due_date: { type: ['null', 'string'] },\r",
											"                    start_date: { type: ['null', 'string'] },\r",
											"                    folder: {\r",
											"                        type: 'object',\r",
											"                        properties: {\r",
											"                            id: { type: 'string' },\r",
											"                            name: { type: 'string' },\r",
											"                            hidden: { type: 'boolean' },\r",
											"                            access: { type: 'boolean' }\r",
											"                        },\r",
											"                        required: ['id', 'name', 'hidden', 'access']\r",
											"                    },\r",
											"                    space: {\r",
											"                        type: 'object',\r",
											"                        properties: {\r",
											"                            id: { type: 'string' },\r",
											"                            name: { type: 'string' },\r",
											"                            access: { type: 'boolean' }\r",
											"                        },\r",
											"                        required: ['id', 'name', 'access']\r",
											"                    },\r",
											"                    archived: { type: 'boolean' },\r",
											"                    override_statuses: { type: 'boolean' },\r",
											"                    permission_level: { type: 'string' }\r",
											"                },\r",
											"                 \"required\": [\"id\", \"name\", \"orderindex\", \"content\", \"priority\", \"assignee\", \"due_date\", \"start_date\", \"folder\", \"space\", \"archived\", \"override_statuses\", \"permission_level\"]\r",
											"            }\r",
											"        }\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/{{List1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{List1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update  List / Delete List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"List1 Deleted\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.eql({});\r",
											"});\r",
											"\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {},\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Updated_Test_List\",\r\n    \"content\": \"Updates_List_content\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/list/{{List1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{List1_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Delete List",
			"item": [
				{
					"name": "Delete List Positive tests",
					"item": [
						{
							"name": "Delete List / Create List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var L_name = pm.collectionVariables.get(\"List_random_name\");\r",
											"var L_content = pm.collectionVariables.get(\"List_random_content\");\r",
											"\r",
											"pm.test(`Check that list name is \"${L_name}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_name);\r",
											"});\r",
											"\r",
											"pm.test(`Check that list content is \"${L_content}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_content);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var id = jsonData.id;\r",
											"pm.collectionVariables.set(\"List1_id\", id);\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"id\": { \"type\": \"string\" },\r",
											"        \"name\": { \"type\": \"string\" },\r",
											"        \"deleted\": { \"type\": \"boolean\" },\r",
											"        \"orderindex\": { \"type\": \"number\" },\r",
											"        \"content\": { \"type\": \"string\" },\r",
											"        \"priority\": { \"type\": \"null\" },\r",
											"        \"assignee\": { \"type\": \"null\" },\r",
											"        \"due_date\": { \"type\": \"null\" },\r",
											"        \"start_date\": { \"type\": \"null\" },\r",
											"        \"folder\": {\"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"id\": { \"type\": \"string\" },\r",
											"                \"name\": { \"type\": \"string\" },\r",
											"                \"hidden\": { \"type\": \"boolean\" },\r",
											"                \"access\": { \"type\": \"boolean\" }\r",
											"            }\r",
											"        },\r",
											"        \"space\": {\"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"id\": { \"type\": \"string\" },\r",
											"                \"name\": { \"type\": \"string\" },\r",
											"                \"access\": { \"type\": \"boolean\" }\r",
											"            }\r",
											"        },\r",
											"        \"inbound_address\": { \"type\": \"string\" },\r",
											"        \"archived\": { \"type\": \"boolean\" },\r",
											"        \"override_statuses\": { \"type\": \"boolean\" },\r",
											"        \"statuses\": {\"type\": \"array\",\r",
											"            \"items\": {\"type\": \"object\",\r",
											"                \"properties\": {\r",
											"                    \"id\": { \"type\": \"string\" },\r",
											"                    \"status\": { \"type\": \"string\" },\r",
											"                    \"orderindex\": { \"type\": \"number\" },\r",
											"                    \"color\": { \"type\": \"string\" },\r",
											"                    \"type\": { \"type\": \"string\" },\r",
											"                    \"status_group\": { \"type\": \"string\" }\r",
											"                }\r",
											"            }\r",
											"        },\r",
											"        \"permission_level\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"id\", \"name\", \"deleted\", \"orderindex\", \"content\", \"priority\", \"assignee\", \"due_date\", \"start_date\", \"folder\", \"space\", \"inbound_address\", \"archived\", \"override_statuses\", \"statuses\", \"permission_level\"]\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var name = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"\r",
											"pm.collectionVariables.set(\"List_random_name\", name);\r",
											"\r",
											"var content = pm.variables.replaceIn('{{$randomWords}}');\r",
											"pm.collectionVariables.set(\"List_random_content\", content);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{List_random_name}}\",\r\n    \"content\": \"{{List_random_content}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/folder/{{Lists_folder_id}}/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"folder",
										"{{Lists_folder_id}}",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete List / Get List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var L_name = pm.collectionVariables.get(\"List_random_name\");\r",
											"var L_content = pm.collectionVariables.get(\"List_random_content\");\r",
											"\r",
											"pm.test(`Check that list 1 name is \"${L_name}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_name);\r",
											"});\r",
											"\r",
											"pm.test(`Check that list 1 content is \"${L_content}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_content);\r",
											"});\r",
											"\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: 'object',\r",
											"    properties: {        \r",
											"            items: {\r",
											"                type: 'object',\r",
											"                properties: {\r",
											"                    id: { type: 'string' },\r",
											"                    name: { type: 'string' },\r",
											"                    orderindex: { type: 'number' },\r",
											"                    content: { type: 'string' },\r",
											"                    status: { type: ['null', 'string'] },\r",
											"                    priority: { type: ['null', 'string'] },\r",
											"                    assignee: { type: ['null', 'string'] },\r",
											"                    task_count: { type: 'number' },\r",
											"                    due_date: { type: ['null', 'string'] },\r",
											"                    start_date: { type: ['null', 'string'] },\r",
											"                    folder: {\r",
											"                        type: 'object',\r",
											"                        properties: {\r",
											"                            id: { type: 'string' },\r",
											"                            name: { type: 'string' },\r",
											"                            hidden: { type: 'boolean' },\r",
											"                            access: { type: 'boolean' }\r",
											"                        },\r",
											"                        required: ['id', 'name', 'hidden', 'access']\r",
											"                    },\r",
											"                    space: {\r",
											"                        type: 'object',\r",
											"                        properties: {\r",
											"                            id: { type: 'string' },\r",
											"                            name: { type: 'string' },\r",
											"                            access: { type: 'boolean' }\r",
											"                        },\r",
											"                        required: ['id', 'name', 'access']\r",
											"                    },\r",
											"                    archived: { type: 'boolean' },\r",
											"                    override_statuses: { type: 'boolean' },\r",
											"                    permission_level: { type: 'string' }\r",
											"                },\r",
											"                 \"required\": [\"id\", \"name\", \"orderindex\", \"content\", \"priority\", \"assignee\", \"due_date\", \"start_date\", \"folder\", \"space\", \"archived\", \"override_statuses\", \"permission_level\"]\r",
											"            }\r",
											"        }\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/{{List1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{List1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete List / Delete List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"List1 Deleted\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.eql({});\r",
											"});\r",
											"\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {},\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Updated_Test_List\",\r\n    \"content\": \"Updates_List_content\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/list/{{List1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{List1_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete List Negative tests",
					"item": [
						{
							"name": "Delete List / Create List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var L_name = pm.collectionVariables.get(\"List_random_name\");\r",
											"var L_content = pm.collectionVariables.get(\"List_random_content\");\r",
											"\r",
											"pm.test(`Check that list name is \"${L_name}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_name);\r",
											"});\r",
											"\r",
											"pm.test(`Check that list content is \"${L_content}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_content);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var id = jsonData.id;\r",
											"pm.collectionVariables.set(\"List1_id\", id);\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"id\": { \"type\": \"string\" },\r",
											"        \"name\": { \"type\": \"string\" },\r",
											"        \"deleted\": { \"type\": \"boolean\" },\r",
											"        \"orderindex\": { \"type\": \"number\" },\r",
											"        \"content\": { \"type\": \"string\" },\r",
											"        \"priority\": { \"type\": \"null\" },\r",
											"        \"assignee\": { \"type\": \"null\" },\r",
											"        \"due_date\": { \"type\": \"null\" },\r",
											"        \"start_date\": { \"type\": \"null\" },\r",
											"        \"folder\": {\"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"id\": { \"type\": \"string\" },\r",
											"                \"name\": { \"type\": \"string\" },\r",
											"                \"hidden\": { \"type\": \"boolean\" },\r",
											"                \"access\": { \"type\": \"boolean\" }\r",
											"            }\r",
											"        },\r",
											"        \"space\": {\"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"id\": { \"type\": \"string\" },\r",
											"                \"name\": { \"type\": \"string\" },\r",
											"                \"access\": { \"type\": \"boolean\" }\r",
											"            }\r",
											"        },\r",
											"        \"inbound_address\": { \"type\": \"string\" },\r",
											"        \"archived\": { \"type\": \"boolean\" },\r",
											"        \"override_statuses\": { \"type\": \"boolean\" },\r",
											"        \"statuses\": {\"type\": \"array\",\r",
											"            \"items\": {\"type\": \"object\",\r",
											"                \"properties\": {\r",
											"                    \"id\": { \"type\": \"string\" },\r",
											"                    \"status\": { \"type\": \"string\" },\r",
											"                    \"orderindex\": { \"type\": \"number\" },\r",
											"                    \"color\": { \"type\": \"string\" },\r",
											"                    \"type\": { \"type\": \"string\" },\r",
											"                    \"status_group\": { \"type\": \"string\" }\r",
											"                }\r",
											"            }\r",
											"        },\r",
											"        \"permission_level\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"id\", \"name\", \"deleted\", \"orderindex\", \"content\", \"priority\", \"assignee\", \"due_date\", \"start_date\", \"folder\", \"space\", \"inbound_address\", \"archived\", \"override_statuses\", \"statuses\", \"permission_level\"]\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var name = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"\r",
											"pm.collectionVariables.set(\"List_random_name\", name);\r",
											"\r",
											"var content = pm.variables.replaceIn('{{$randomWords}}');\r",
											"pm.collectionVariables.set(\"List_random_content\", content);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{List_random_name}}\",\r\n    \"content\": \"{{List_random_content}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/folder/{{Lists_folder_id}}/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"folder",
										"{{Lists_folder_id}}",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete List / Delete List / invalid list_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Error text check\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Team not authorized\");\r",
											"});\r",
											"pm.test(\"ECODE text check\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"OAUTH_027\");\r",
											"});\r",
											"\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"err\": { \"type\": \"string\" },\r",
											"        \"ECODE\": { \"type\": \"string\" },\r",
											"},\r",
											"\r",
											"    \"required\": [\"err\", \"ECODE\"]\r",
											"};"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Updated_Test_List\",\r\n    \"content\": \"Updates_List_content\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/list/9012132",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"9012132"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete List / Get List / invalid list_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: 'object',\r",
											"    properties: {        \r",
											"            items: {\r",
											"                type: 'object',\r",
											"                properties: {\r",
											"                    id: { type: 'string' },\r",
											"                    name: { type: 'string' },\r",
											"                    orderindex: { type: 'number' },\r",
											"                    content: { type: 'string' },\r",
											"                    status: { type: ['null', 'string'] },\r",
											"                    priority: { type: ['null', 'string'] },\r",
											"                    assignee: { type: ['null', 'string'] },\r",
											"                    task_count: { type: 'number' },\r",
											"                    due_date: { type: ['null', 'string'] },\r",
											"                    start_date: { type: ['null', 'string'] },\r",
											"                    folder: {\r",
											"                        type: 'object',\r",
											"                        properties: {\r",
											"                            id: { type: 'string' },\r",
											"                            name: { type: 'string' },\r",
											"                            hidden: { type: 'boolean' },\r",
											"                            access: { type: 'boolean' }\r",
											"                        },\r",
											"                        required: ['id', 'name', 'hidden', 'access']\r",
											"                    },\r",
											"                    space: {\r",
											"                        type: 'object',\r",
											"                        properties: {\r",
											"                            id: { type: 'string' },\r",
											"                            name: { type: 'string' },\r",
											"                            access: { type: 'boolean' }\r",
											"                        },\r",
											"                        required: ['id', 'name', 'access']\r",
											"                    },\r",
											"                    archived: { type: 'boolean' },\r",
											"                    override_statuses: { type: 'boolean' },\r",
											"                    permission_level: { type: 'string' }\r",
											"                },\r",
											"                 \"required\": [\"id\", \"name\", \"orderindex\", \"content\", \"priority\", \"assignee\", \"due_date\", \"start_date\", \"folder\", \"space\", \"archived\", \"override_statuses\", \"permission_level\"]\r",
											"            }\r",
											"        }\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/{{List1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{List1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete List / Delete List / unreal list_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Error text check\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Team(s) not authorized\");\r",
											"});\r",
											"pm.test(\"ECODE text check\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"OAUTH_023\");\r",
											"});\r",
											"\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"err\": { \"type\": \"string\" },\r",
											"        \"ECODE\": { \"type\": \"string\" },\r",
											"},\r",
											"\r",
											"    \"required\": [\"err\", \"ECODE\"]\r",
											"};"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Updated_Test_List\",\r\n    \"content\": \"Updates_List_content\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/list/901510753166",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"901510753166"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete List / Get List / unreal list_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: 'object',\r",
											"    properties: {        \r",
											"            items: {\r",
											"                type: 'object',\r",
											"                properties: {\r",
											"                    id: { type: 'string' },\r",
											"                    name: { type: 'string' },\r",
											"                    orderindex: { type: 'number' },\r",
											"                    content: { type: 'string' },\r",
											"                    status: { type: ['null', 'string'] },\r",
											"                    priority: { type: ['null', 'string'] },\r",
											"                    assignee: { type: ['null', 'string'] },\r",
											"                    task_count: { type: 'number' },\r",
											"                    due_date: { type: ['null', 'string'] },\r",
											"                    start_date: { type: ['null', 'string'] },\r",
											"                    folder: {\r",
											"                        type: 'object',\r",
											"                        properties: {\r",
											"                            id: { type: 'string' },\r",
											"                            name: { type: 'string' },\r",
											"                            hidden: { type: 'boolean' },\r",
											"                            access: { type: 'boolean' }\r",
											"                        },\r",
											"                        required: ['id', 'name', 'hidden', 'access']\r",
											"                    },\r",
											"                    space: {\r",
											"                        type: 'object',\r",
											"                        properties: {\r",
											"                            id: { type: 'string' },\r",
											"                            name: { type: 'string' },\r",
											"                            access: { type: 'boolean' }\r",
											"                        },\r",
											"                        required: ['id', 'name', 'access']\r",
											"                    },\r",
											"                    archived: { type: 'boolean' },\r",
											"                    override_statuses: { type: 'boolean' },\r",
											"                    permission_level: { type: 'string' }\r",
											"                },\r",
											"                 \"required\": [\"id\", \"name\", \"orderindex\", \"content\", \"priority\", \"assignee\", \"due_date\", \"start_date\", \"folder\", \"space\", \"archived\", \"override_statuses\", \"permission_level\"]\r",
											"            }\r",
											"        }\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/{{List1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{List1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete List / Delete List / invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Error text check\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Token invalid\");\r",
											"});\r",
											"pm.test(\"ECODE text check\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"OAUTH_025\");\r",
											"});\r",
											"\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"err\": { \"type\": \"string\" },\r",
											"        \"ECODE\": { \"type\": \"string\" },\r",
											"},\r",
											"\r",
											"    \"required\": [\"err\", \"ECODE\"]\r",
											"};"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "pk_188645185_8T3GZ6VOI0YO22G7GLFG8UAMI3XA6K2I",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Updated_Test_List\",\r\n    \"content\": \"Updates_List_content\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/list/{{List1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{List1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete List / Get List / invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var L_name = pm.collectionVariables.get(\"List_random_name\");\r",
											"var L_content = pm.collectionVariables.get(\"List_random_content\");\r",
											"\r",
											"pm.test(`Check that list 1 name is \"${L_name}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_name);\r",
											"});\r",
											"\r",
											"pm.test(`Check that list 1 content is \"${L_content}\"`, function () {\r",
											"    pm.expect(pm.response.text()).to.include(L_content);\r",
											"});\r",
											"\r",
											"\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"const schema = {\r",
											"    type: 'object',\r",
											"    properties: {        \r",
											"            items: {\r",
											"                type: 'object',\r",
											"                properties: {\r",
											"                    id: { type: 'string' },\r",
											"                    name: { type: 'string' },\r",
											"                    orderindex: { type: 'number' },\r",
											"                    content: { type: 'string' },\r",
											"                    status: { type: ['null', 'string'] },\r",
											"                    priority: { type: ['null', 'string'] },\r",
											"                    assignee: { type: ['null', 'string'] },\r",
											"                    task_count: { type: 'number' },\r",
											"                    due_date: { type: ['null', 'string'] },\r",
											"                    start_date: { type: ['null', 'string'] },\r",
											"                    folder: {\r",
											"                        type: 'object',\r",
											"                        properties: {\r",
											"                            id: { type: 'string' },\r",
											"                            name: { type: 'string' },\r",
											"                            hidden: { type: 'boolean' },\r",
											"                            access: { type: 'boolean' }\r",
											"                        },\r",
											"                        required: ['id', 'name', 'hidden', 'access']\r",
											"                    },\r",
											"                    space: {\r",
											"                        type: 'object',\r",
											"                        properties: {\r",
											"                            id: { type: 'string' },\r",
											"                            name: { type: 'string' },\r",
											"                            access: { type: 'boolean' }\r",
											"                        },\r",
											"                        required: ['id', 'name', 'access']\r",
											"                    },\r",
											"                    archived: { type: 'boolean' },\r",
											"                    override_statuses: { type: 'boolean' },\r",
											"                    permission_level: { type: 'string' }\r",
											"                },\r",
											"                 \"required\": [\"id\", \"name\", \"orderindex\", \"content\", \"priority\", \"assignee\", \"due_date\", \"start_date\", \"folder\", \"space\", \"archived\", \"override_statuses\", \"permission_level\"]\r",
											"            }\r",
											"        }\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/{{List1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{List1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete List / Delete List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"List1 Deleted\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.eql({});\r",
											"});\r",
											"\r",
											"//////////////////////////////////////////////////////////////////////////////////////////////////\r",
											"// SCHEMA CHECK\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv();\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {},\r",
											"};\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that response schema is valid\", function () {\r",
											"    const valid = validate(response);\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Updated_Test_List\",\r\n    \"content\": \"Updates_List_content\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/list/{{List1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{List1_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "List1_id",
			"value": ""
		},
		{
			"key": "Lists_space_id",
			"value": ""
		},
		{
			"key": "List2_id",
			"value": ""
		},
		{
			"key": "List_Negative_id",
			"value": ""
		},
		{
			"key": "List_random_name",
			"value": ""
		},
		{
			"key": "List_random_content",
			"value": ""
		},
		{
			"key": "List2_random_name",
			"value": ""
		},
		{
			"key": "List2_random_content",
			"value": ""
		},
		{
			"key": "UPD_List_random_name",
			"value": ""
		},
		{
			"key": "UPD_List_random_content",
			"value": ""
		},
		{
			"key": "Listpre_id",
			"value": ""
		}
	]
}